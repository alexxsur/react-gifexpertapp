{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACQ,sBAAMC,SATO,SAACC,GAClBA,EAAEC,iBACEJ,GAAcA,EAAWK,OAAOC,OAAS,IACzCR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0DAC6CC,UAAUH,GADvD,sDAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACQ,sBAAKc,UAAU,wCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAMA,EAAN,WCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECJwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPxB,EAAQC,GACPwB,MAAK,SAAAC,GACEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGtB,CAACpB,IAIIqB,EDfwBK,CAAa1B,GAArCoB,EAAP,EAAOA,QAAcP,EAArB,EAAgBN,KAEhB,OACQ,qCACI,6BAAKP,IACL,mBAAGgB,UAAU,wCAAb,SAAuDI,EAAU,cAAgB,mBACjF,qBAAKJ,UAAU,YAAf,SACSH,EAAOJ,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEXtCgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACQ,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAEX,OAAQ,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCb7C6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a836358a.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue && inputValue.trim().length > 2) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n            <form onSubmit={handleSubmit}>                \n                <input\n                    type=\"text\"\n                    value={ inputValue }\n                    onChange={handleInputChange}\n                />                \n            </form>\n        );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category)}&api_key=gyIiSo12lWr226ySyAgSmhQgep5CIJRn`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from \"react\";\n\nexport const GifGridItem = ({id,title,url}) => {\n\n    return (\n            <div className=\"card animate__animated animate__swing\">\n                <img src={url} alt={title} />\n                <p> { title } </p>\n            </div>\n        );\n}","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({category}) => {\n\n    const {loading, data:images} = useFetchGifs(category);\n\n    return (\n            <>\n                <h3>{category}</h3>\n                <p className=\"card animate__animated animate__flash\">{ loading ? 'Cargando...' : 'Carga completa' }</p>\n                <div className=\"card-grid\">\n                        {images.map((img) => (\n                            <GifGridItem  key={img.id} {...img}/>\n                        ))}\n                </div>\n            </>\n        );\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}","import { useState,useEffect } from \"react\"\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category)\n        .then(imgs => {\n                setState({\n                    data:imgs,\n                    loading:false\n                });\n        });\n    },[category]);\n\n\n\n    return state;\n}","import React, {useState} from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return (\n            <>\n                <h2>GifExpertApp</h2>\n                <AddCategory setCategories={setCategories} />\n                <hr/>\n                <ol>\n                    {\n                        categories.map(category => {\n\n                            return (<GifGrid\n                                        key={category}\n                                        category={category}\n                                    />\n                            )\n                        })\n                    }\n                </ol>\n            </>\n        );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}